---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProductCard from '../../components/ProductCard.astro';

// Build-time paths for categories
export async function getStaticPaths() {
    let categories = [];
    try {
        const response = await fetch('http://localhost:8080/api/category');
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        categories = await response.json();
    } catch (error) {
        console.error("Error fetching categories for static paths:", error);
        return [];
    }

    return categories.map((category: { id: number; name: string }) => ({
        params: { categoryName: category.name.toLowerCase().replace(/\s+/g, '-') },
        props: { categoryId: category.id, categoryTitle: category.name }
    }));
}

const { categoryName } = Astro.params;
const { categoryId, categoryTitle } = Astro.props;

// Pagination setup
const PAGE_SIZE = 12;
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') ?? '1', 10);

let products: any[] = [];
let totalProducts = 0;
let totalPages = 0;

try {
    // Backend pagination: page is 0-indexed in Spring
    const productsResponse = await fetch(
        `http://localhost:8080/api/product/cat/${categoryId}?page=${page - 1}&size=${PAGE_SIZE}`
    );

    if (!productsResponse.ok) throw new Error(`HTTP error! status: ${productsResponse.status}`);

    const data = await productsResponse.json();

    // Spring Data returns { content, totalElements, totalPages, ... }
    products = data.content.filter((product: any) => product && product.imagePath);
    totalProducts = data.totalElements;
    totalPages = data.totalPages;
} catch (error) {
    console.error(`Error fetching paginated products for category ${categoryName}:`, error);
    products = [];
}

function getPageUrl(p: number) {
    return `/category/${categoryName}?page=${p}`;
}

// Generate page numbers with ellipsis
const pageRange = 2;
const pages = [];
if (totalPages > 1) {
    if (page > pageRange + 1) {
        pages.push(1);
        pages.push("...");
    }
    for (let i = Math.max(1, page - pageRange); i <= Math.min(totalPages, page + pageRange); i++) {
        pages.push(i);
    }
    if (page < totalPages - pageRange) {
        if (page < totalPages - pageRange - 1) {
            pages.push("...");
        }
        pages.push(totalPages);
    }
}
---

<BaseLayout title={categoryTitle ? `${categoryTitle} Ангилал` : `Ангилал`}>
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-6">
            {categoryTitle || 'Ангилал'}
        </h1>

        <nav class="mb-6 text-sm text-gray-600" aria-label="Breadcrumb">
            <ol class="list-none p-0 inline-flex">
                <li class="flex items-center">
                    <a href="/" class="hover:text-[#f7941e]">Нүүр хуудас</a>
                    <span class="mx-2">/</span>
                </li>
                <li class="flex items-center">
                    <span class="font-semibold text-gray-800">{categoryTitle || 'Ангилал'}</span>
                </li>
            </ol>
        </nav>

        {products.length > 0 ? (
            <>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {products.map((product: any) => (
                        <ProductCard product={product} />
                    ))}
                </div>

                {totalPages > 1 && (
                    <div class="flex justify-center mt-8 space-x-2">
                        {page > 1 && (
                            <a
                                href={getPageUrl(page - 1)}
                                class="px-3 py-1 rounded bg-gray-200 text-gray-700 hover:bg-gray-300"
                            >
                                Өмнөх
                            </a>
                        )}

                        {pages.map(p => (
                            p === "..." ? (
                                <span class="px-3 py-1 text-gray-500">...</span>
                            ) : (
                                <a
                                    href={getPageUrl(p)}
                                    class={`px-3 py-1 rounded ${page === p ? 'bg-[#f7941e] text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                                >
                                    {p}
                                </a>
                            )
                        ))}

                        {page < totalPages && (
                            <a
                                href={getPageUrl(page + 1)}
                                class="px-3 py-1 rounded bg-gray-200 text-gray-700 hover:bg-gray-300"
                            >
                                Дараах
                            </a>
                        )}
                    </div>
                )}
            </>
        ) : (
            <div class="text-center py-12">
                <p class="text-xl text-gray-600">Одоогоор энэ ангилалд бүтээгдэхүүн байхгүй байна.</p>
                <p class="text-gray-500 mt-2">Дараарай дахин шалгана уу эсвэл өөр ангилал сонгоно уу.</p>
            </div>
        )}
    </div>
</BaseLayout>
