---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProductCard from '../../components/ProductCard.astro';

// Build-time paths for categories (still generated, but we will prefer numeric links elsewhere)
export async function getStaticPaths() {
    let categories = [];
    try {
        const response = await fetch('http://localhost:8080/api/category');
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        categories = await response.json();
    } catch (error) {
        console.error("Error fetching categories for static paths:", error);
        return [];
    }

    // Generate no paths if you want to avoid slugs entirely:
    // return [];

    // Otherwise, keep existing for backwards compatibility
    return categories.map((category: { id: number; name: string }) => ({
        params: { categoryName: String(category.id) },
        props: { categoryId: category.id, categoryTitle: category.name }
    }));
}

const { categoryName } = Astro.params;
let numericCategoryId = parseInt(String(categoryName), 10);
let categoryId = Number.isFinite(numericCategoryId) ? numericCategoryId : undefined;
let categoryTitle = '';

// Pagination setup
const PAGE_SIZE = 12;
const url = new URL(Astro.request.url);
const page = Math.max(1, parseInt(url.searchParams.get('page') ?? '1', 10));

// Fetch categories to resolve title and validate id
let sidebarCategories: Array<{ id: number; name: string }> = [];
try {
    const cRes = await fetch('http://localhost:8080/api/category');
    if (cRes.ok) sidebarCategories = await cRes.json();
} catch {}

if (categoryId) {
    const found = sidebarCategories.find(c => c.id === categoryId);
    if (found) categoryTitle = found.name;
}

// Fetch products by numeric id
let products: any[] = [];
let totalPages = 0;
try {
    if (categoryId) {
        const productsResponse = await fetch(`http://localhost:8080/api/product/cat/${categoryId}?page=${page - 1}&size=${PAGE_SIZE}`);
        if (!productsResponse.ok) throw new Error(`HTTP error! status: ${productsResponse.status}`);
        const data = await productsResponse.json();
        products = Array.isArray(data.content) ? data.content : [];
        totalPages = data.totalPages || 0;
    }
} catch (e) {
    products = [];
}

function getPageUrl(p: number) {
    const valid = Math.max(1, Math.min(p, totalPages));
    return `/category/${categoryId}?page=${valid}`;
}

const pageRange = 2;
const pages: (number | string)[] = [];
if (totalPages > 1) {
    const start = Math.max(1, page - pageRange);
    const end = Math.min(totalPages, page + pageRange);
    if (start > 1) {
        pages.push(1);
        if (start > 2) pages.push('...');
    }
    for (let i = start; i <= end; i++) pages.push(i);
    if (end < totalPages) {
        if (end < totalPages - 1) pages.push('...');
        pages.push(totalPages);
    }
}
---

<BaseLayout title={categoryTitle ? `${categoryTitle} Ангилал` : `Ангилал`}>
    <section x-data="{ open:false }" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="flex items-center justify-between mb-4 lg:mb-6">
            <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">{categoryTitle || 'Ангилал'}</h1>
            <button @click="open=true" class="lg:hidden inline-flex items-center gap-2 px-3 py-2 rounded-md bg-gray-900 text-white text-sm">Ангилал</button>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
            <aside class="lg:col-span-3">
                <div class="hidden lg:block sticky top-24 max-h-[70vh] overflow-y-auto pr-2">
                    <nav class="space-y-1">
                        {sidebarCategories.map(cat => (
                            <a href={`/category/${cat.id}`} class={`block px-3 py-2 rounded-md text-sm ${cat.id === categoryId ? 'bg-[#f7941e] text-white' : 'bg-gray-50 hover:bg-gray-100 text-gray-700'}`}>{cat.name}</a>
                        ))}
                    </nav>
                </div>
                <div x-show="open" x-cloak class="fixed inset-0 z-50 lg:hidden">
                    <div class="absolute inset-0 bg-black/40" @click="open=false"></div>
                    <div class="absolute bottom-0 left-0 right-0 bg-white rounded-t-2xl p-4 max-h-[80vh] overflow-y-auto shadow-xl">
                        <div class="flex items-center justify-between mb-3">
                            <h2 class="text-lg font-semibold">Ангилал</h2>
                            <button @click="open=false" class="p-2 rounded-md hover:bg-gray-100">✕</button>
                        </div>
                        <nav class="space-y-1">
                            {sidebarCategories.map(cat => (
                                <a href={`/category/${cat.id}`} class={`block px-3 py-2 rounded-md text-sm ${cat.id === categoryId ? 'bg-[#f7941e] text-white' : 'bg-gray-50 hover:bg-gray-100 text-gray-700'}`} @click="open=false">{cat.name}</a>
                            ))}
                        </nav>
                    </div>
                </div>
            </aside>

            <div class="lg:col-span-9">
                <nav class="mb-4 text-sm text-gray-600" aria-label="Breadcrumb">
                    <ol class="inline-flex">
                        <li><a href="/" class="hover:text-[#f7941e]">Нүүр хуудас</a><span class="mx-2">/</span></li>
                        <li><span class="font-semibold text-gray-800">{categoryTitle || 'Ангилал'}</span></li>
                    </ol>
                </nav>

                {products.length > 0 ? (
                    <>
                        <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                            {products.map((product: any) => (
                                <ProductCard product={{ ...product, categoryName: categoryTitle, categoryId: product?.categoryID?.id ?? categoryId }} />
                            ))}
                        </div>

                        {totalPages > 1 && (
                            <div class="flex justify-center mt-8 space-x-2">
                                <a href={getPageUrl(page - 1)} class={`px-3 py-1 rounded border ${page <= 1 ? 'pointer-events-none opacity-50 bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`}>Өмнөх</a>
                                {pages.map(p => (
                                    p === '...' ? <span class="px-3 py-1 text-gray-500">...</span> : <a href={getPageUrl(p as number)} class={`px-3 py-1 rounded ${page === p ? 'bg-[#f7941e] text-white' : 'bg-white border text-gray-700 hover:bg-gray-50'}`}>{p}</a>
                                ))}
                                <a href={getPageUrl(page + 1)} class={`px-3 py-1 rounded border ${page >= totalPages ? 'pointer-events-none opacity-50 bg-gray-100 text-gray-400' : 'bg-white text-gray-700 hover:bg-gray-50'}`}>Дараах</a>
                            </div>
                        )}
                    </>
                ) : (
                    <div class="text-center py-12">
                        <p class="text-xl text-gray-600">Одоогоор энэ ангилалд бүтээгдэхүүн байхгүй байна.</p>
                    </div>
                )}
            </div>
        </div>
    </section>
</BaseLayout>
